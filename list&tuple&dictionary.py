# 리스트는 대괄호 사용
a = [1, 2, 3, 4, 5]
# 튜플은 소괄호 사용
b = (1, 2, 3, 4, 5)
# 딕셔너리는 중괄호 사용
c = {'key1' : value, 'key2' : value2}

# 리스트 = mutable : 값 변경, 삭제 가능
# 튜플 = immutable : 값 변경, 삭제 불가능
# 딕셔너리 = mutable : 값 변경, 삭제 가능
# 딕셔너리: 리스트, 튜플과 달리 순서가 없어 인덱스로 접근이 불가능(키로 접근 ex. c['key1']), set과 같이 중복이 불가능(key 값)

'''
[mutable vs. immutable 객체]
1. mutable : list, set, dict
 -> 값 변경 시 참조하고 있는 메모리의 주소가 변경되지 않는다.
 -> shallow copy = 같은 메모리를 참조하고 있어서, 하나만 변경해도 해당 메모리를 참조하고 있는 객체들의 값들도 모두 변경된다.
 -> 이러한 문제를 방지하기 위해서는 내부의 객체들까지 모두 새롭게 copy 해주는 copy.deepcopy 메소드를 활용할 수 있다.
2. immutable : bool, int, float, tuple, str, frozenset
 -> 값 변경이 불가능하다. 변경이 된다하더라도 메모리 재할당이 되어 참조 메모리 주소가 변경된다.
 -> shallow copy = 같은 메모리 주소를 참조하고 있다가도, 하나를 변경하면 재할당이 되므로 각 객체는 다른 값을 가질 수 있다.
 참고) https://wikidocs.net/16038
 * 위와 같은 이유로, 리스트의 경우 단순히 대입 연산을 하면 값이 변경될 때 문제가 발생할 수 있기 때문에, 리스트의 값을 복제해야 할 때는 deepcopy() 함수를 사용해야 한다.
'''
